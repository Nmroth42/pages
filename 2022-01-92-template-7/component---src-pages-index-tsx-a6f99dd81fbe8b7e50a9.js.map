{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["pageQuery","IndexPage","props","data","posts","allMarkdownRemark","edges","title","site","siteMetadata","className","to","aria-label","icon","faTags","faSearch","length","PostList","useState","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","node","frontmatter","bf","aDate","Date","update","includes","date","bDate","throttleScrollHandler","useCallback","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","expendPostList","list","mapToList","map","post","excerpt","fields","slug","tags","Number","split","mapTag","tag","key","useEffect","slice","addEventListener","removeEventListener"],"mappings":"2FAAA,qJAsFaA,EAAY,aA0BVC,UAvEG,SAACC,GAA0B,IACnCC,EAASD,EAATC,KACFC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAAQJ,EAAKK,KAAKC,aAAaF,MAErC,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKA,MAAOA,IACZ,uBAAKG,UAAU,cACb,uBAAKA,UAAU,wBACf,uBAAKA,UAAU,uBACb,0BACE,0BACE,uBAAKA,UAAU,YACb,gBAAC,OAAD,CAAMC,GAAG,QAAQC,aAAW,QAC1B,gBAAC,IAAD,CAAIC,KAAMC,SAIhB,0BACE,uBAAKJ,UAAU,eACb,gBAAC,OAAD,CAAMC,GAAG,UAAUD,UAAU,SAASE,aAAW,UAC/C,gBAAC,IAAD,CAAIC,KAAME,WAMlB,gBAAC,IAAD,CAAUX,MAAOA,IAChBA,EAAMY,OAAS,IAAM,KACpB,uBAAKN,UAAU,mBACb,uBAAKA,UAAU,iBACb,gBAAC,OAAD,CAAMC,GAAG,WACP,gBAAC,IAAD,CAAIE,KAAME,MACV,uD,yJCqDHE,IAhHE,SAACf,GAAyB,IACjCE,EAAUF,EAAVE,MADiC,EAEXc,mBAAS,IAAhCC,EAFkC,KAEzBC,EAFyB,OAGKF,mBAAwB,IAA/DG,EAHkC,KAGjBC,EAHiB,KAKnCC,EAAcC,mBAAQ,WAY1B,OAXApB,EAAMqB,MAAK,SAACC,EAAQC,GAClB,IAAMC,EAAKF,EAAEG,KAAKC,YACZC,EAAKJ,EAAEE,KAAKC,YAEZE,EAAQ,IAAIC,KAAKL,EAAGM,OAAOC,SAAS,QAAUP,EAAGQ,KAAOR,EAAGM,QAC3DG,EAAQ,IAAIJ,KAAKF,EAAGG,OAAOC,SAAS,QAAUJ,EAAGK,KAAOL,EAAGG,QAEjE,OAAIF,EAAQK,EAAc,EACtBL,EAAQK,GAAe,EACpB,KAEFjC,IACN,CAACA,IAEEkC,EAAwBC,sBAC5B,KAAS,WAELC,OAAOC,YAAeC,SAASC,cAAc,cAAiCC,wBAAwBC,QAEtGzB,GAAW,SAAC0B,GACV,OAAIA,GAAQvB,EAAYP,OAAe8B,EAChCA,EAAO,QAGjB,KACH,CAACvB,IAGGwB,EAAiBR,uBAAY,SAACS,GAClC,IAAMC,EAAYD,EAAKE,KAAI,SAACC,GAAc,IAChCtB,EAASsB,EAATtB,KACAuB,EAAiCvB,EAAjCuB,QAASC,EAAwBxB,EAAxBwB,OAAQvB,EAAgBD,EAAhBC,YACjBwB,EAASD,EAATC,KACAlB,EAAsBN,EAAtBM,KAAM7B,EAAgBuB,EAAhBvB,MAAOgD,EAASzB,EAATyB,KACjBrB,EAASJ,EAAYI,OACY,IAAjCsB,OAAOtB,EAAOuB,MAAM,KAAK,MAAWvB,EAAS,MAEjD,IAAMwB,EAASH,EAAKL,KAAI,SAACS,GACvB,GAAY,cAARA,EAEJ,OACE,sBAAIC,IAAQN,EAAL,IAAaK,EAAOjD,UAAU,OACnC,4BACE,gBAAC,OAAD,CAAMC,GAAE,SAAWgD,GAAnB,IAA+BA,QAMvC,OACE,sBAAIC,IAAKN,EAAM5C,UAAS,QACtB,+BACE,uBAAKA,UAAU,gBACb,sBAAIA,UAAU,SACZ,gBAAC,OAAD,CAAMC,GAAI2C,GAAO/C,IAEnB,uBAAKG,UAAU,QACb,uBAAKA,UAAU,aACb,wBAAMA,UAAU,QAAQ0B,IAI1B,sBAAI1B,UAAU,YAAYgD,KAG9B,gBAAC,OAAD,CAAM/C,GAAI2C,GACR,wBAAM5C,UAAU,WAAW0C,SAOrC9B,GAAmB,SAACwB,GAClB,4BAAWA,GAAX,YAAoBG,SAErB,IAqBH,OAnBAY,qBAAU,WACJ1C,EAAU,GAAiB,KAAZA,GAAgB4B,EAAexB,EAAYuC,MAAMzC,EAAgBL,OAAQG,MAC3F,CAACA,IAEJ0C,qBAAU,WAUR,OATIxC,EAAgBL,QAAQM,EAAmB,IAE/CF,GAAW,SAAC0B,GAEV,OADa,KAATA,GAAaC,EAAexB,EAAYuC,MAAM,EAAG,KAC9C,MAGTtB,OAAOuB,iBAAiB,SAAUzB,GAE3B,WACLE,OAAOwB,oBAAoB,SAAU1B,MAEtC,CAACf,IAGF,uBAAKb,UAAU,aACb,0BACGW","file":"component---src-pages-index-tsx-a6f99dd81fbe8b7e50a9.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faTags, faSearch, faMoon, faSun, faChevronRight, faUserCircle, faRandom, faHome } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport Bio from '../components/Bio';\nimport './styles/index.scss';\nimport PostList from '../components/PostList';\n\ninterface IndexPageProps {\n  path: string;\n  data: any;\n}\n\n// <li>\n//   <div className=\"tag-wrap\">\n//     <Link to=\"/tags\">\n//       <Fa icon={faTags} />\n//     </Link>\n//   </div>\n// </li>\n// <li>\n//   <div className=\"search-wrap\">\n//     <Link to=\"/search\" className=\"search\">\n//       <Fa icon={faSearch} />\n//     </Link>\n//   </div>\n// </li>\n// <li>\n//   <div className=\"random-wrap-btn\">\n//     <Link to=\"/random\" className=\"profile\">\n//       <Fa icon={faRandom} />\n//     </Link>\n//   </div>\n// </li>\n\n\nconst IndexPage = (props: IndexPageProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n  const title = data.site.siteMetadata.title;\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <div className=\"index-wrap\">\n        <div className=\"index-post-list-wrap\">\n        <div className=\"index-post-list-nav\">\n          <ul>\n            <li>\n              <div className=\"tag-wrap\">\n                <Link to=\"/tags\" aria-label=\"Tags\">\n                  <Fa icon={faTags} />\n                </Link>\n              </div>\n            </li>\n            <li>\n              <div className=\"search-wrap\">\n                <Link to=\"/search\" className=\"search\" aria-label=\"Search\">\n                  <Fa icon={faSearch} />\n                </Link>\n              </div>\n            </li>\n          </ul>\n        </div>\n          <PostList posts={posts} />\n          {posts.length < 100 ? null : (\n            <div className=\"show-more-posts\">\n              <div className=\"show-more-btn\">\n                <Link to=\"/search\">\n                  <Fa icon={faSearch} />\n                  <span>SHOW MORE POSTS</span>\n                </Link>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: 100) {\n      edges {\n        node {\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            update(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faTags,  faRandom , faMoon, faSun, faChevronRight, faUserCircle } from '@fortawesome/free-solid-svg-icons';\nimport { useColorMode } from 'theme-ui';\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { excerpt, fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, tags } = frontmatter;\n      let update = frontmatter.update;\n      if (Number(update.split(',')[1]) === 1) update = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <li key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </li>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <div className=\"info-wrapper\">\n              <h2 className=\"title\">\n                <Link to={slug}>{title}</Link>\n              </h2>\n              <div className=\"info\">\n                <div className=\"date-wrap\">\n                  <span className=\"date\">{date}</span>\n                  {/* {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null} */}\n                </div>\n                {/* {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null} */}\n                <ul className=\"tag-list\">{mapTag}</ul>\n              </div>\n            </div>\n            <Link to={slug}>\n              <span className=\"excerpt\">{excerpt}</span>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>\n        {currentPostList}\n      </ul>\n    </div>\n  );\n};\n\nexport default PostList;\n"],"sourceRoot":""}