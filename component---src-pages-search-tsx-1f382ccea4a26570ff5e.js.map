{"version":3,"sources":["webpack:///./src/pages/search.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["pageQuery","Search","props","posts","data","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","useCallback","filter","post","node","frontmatter","rawMarkdownBody","title","date","lowerValue","toLocaleLowerCase","includes","id","className","to","icon","faArrowLeft","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length","PostList","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","bf","aDate","Date","update","bDate","throttleScrollHandler","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","expendPostList","list","mapToList","map","excerpt","fields","slug","tags","Number","split","mapTag","tag","key","useEffect","slice","addEventListener","removeEventListener"],"mappings":"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","file":"component---src-pages-search-tsx-1f382ccea4a26570ff5e.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useState, useCallback } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport { navigate } from \"gatsby\"\nimport './styles/search.scss';\n\ninterface SearchProps {\n  data: any;\n}\n\nconst Search = (props: SearchProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts = useCallback(\n    posts.filter((post: any) => {\n      const { node } = post;\n      const { frontmatter, rawMarkdownBody } = node;\n      const { title } = frontmatter;\n      const { date } = frontmatter\n      const lowerValue = value.toLocaleLowerCase();\n\n      if (!isTitleOnly) return rawMarkdownBody.toLocaleLowerCase().includes(lowerValue);\n\n      return title.toLocaleLowerCase().includes(lowerValue) || date.toLocaleLowerCase().includes(lowerValue);\n    }),\n    [value, isTitleOnly]\n  );\n\n//   const handleSearch = (e) => {\n//\n//   navigate(`/?search=${value}`)\n//   const searchResults = posts.filter(post => {\n//     if (\n//       post.node.frontmatter.title\n//         .toLowerCase()\n//         .includes(value.toLowerCase()) ||\n//       post.node.frontmatter.date\n//         .toLowerCase()\n//         .includes(value.toLowerCase())\n//     ) {\n//       return post\n//     }\n//   })\n//   setQuery(e.target.value)\n//   if ( e.target.value.length < 1) {\n//   navigate(`/`)\n// }\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Navbar\">\n        <div className=\"navbar-wrap-btn\">\n          <Link to=\"/\">\n            <Fa icon={faArrowLeft} />\n          </Link>\n        </div>\n      </div>\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.4}}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                Title + Date\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.4 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faTags,  faRandom , faMoon, faSun, faChevronRight, faUserCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { excerpt, fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, tags } = frontmatter;\n      let update = frontmatter.update;\n      if (Number(update.split(',')[1]) === 1) update = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\n              </div>\n              {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">·</span> : null}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <Link to={slug}>\n              <span className=\"excerpt\">{excerpt}</span>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n\n      <ul>\n        {currentPostList}\n      </ul>\n    </div>\n  );\n};\n\nexport default PostList;\n"],"sourceRoot":""}