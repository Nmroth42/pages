{"componentChunkName":"component---src-templates-post-tsx","path":"/2022-01-92-modular-design/","result":{"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#functional-independence\">Functional Independence</a></li>\n<li><a href=\"#cohesion-and-coupling\">Cohesion and Coupling</a></li>\n<li><a href=\"#law-of-demeter\">Law of Demeter</a></li>\n</ul>\n</div>\n<h2 id=\"functional-independence\" style=\"position:relative;\"><a href=\"#functional-independence\" aria-label=\"functional independence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Independence</h2>\n<p>In order to build a software with effective modular design there is a factor “Functional Independence” which comes into play. The meaning of Functional Independence is that a function is atomic in nature so that it performs only a single task of the software without or with least interaction with other modules. Functional Independence is considered as a sign of growth in modularity i.e., presence of larger functional independence results in a software system of good design and design further affects the quality of the software.</p>\n<h2 id=\"cohesion-and-coupling\" style=\"position:relative;\"><a href=\"#cohesion-and-coupling\" aria-label=\"cohesion and coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cohesion and Coupling</h2>\n<p>Independence of modules of a software system can be measured using 2 criteria : Cohesion, and Coupling</p>\n<p>Cohesion is a measure of the degree to which the elements of the module are functionally related. It is the degree to which all elements directed towards performing a single task are contained in the component. Basically, cohesion is the internal glue that keeps the module together. A good software design will have high cohesion.</p>\n<p>Coupling is the measure of the degree of interdependence between the modules. A good software will have low coupling.</p>\n<h2 id=\"law-of-demeter\" style=\"position:relative;\"><a href=\"#law-of-demeter\" aria-label=\"law of demeter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Law of Demeter</h2>\n<p>The Law of Demeter states that a object should assume as little as possible about the structure or properties of anything else (including its subcomponents). It was designed to promote loose coupling in software designs. The advantage is that the resulting software tends to be more maintainable and adaptable. Since objects are less dependent on the internal structure of other objects, object implementation can be changed without reworking their callers.</p>\n<p>Example: for any Class C, a method M in C can only invoke the following:</p>\n<ul>\n<li>arguments in M</li>\n<li>C and its fields</li>\n<li>Any instances of C</li>\n<li>Global Variables</li>\n</ul>\n<p>Essentially, this means that method M can only talk to its direct “friends” (in this case are immediate objects and variables) but are not allowed to talk strangers (other unrelated objects or indirect objects).</p>\n<p>Law of Demeter may be viewed as a corollary to the principle of least privilege, which dictates that a module possess only the information and resources necessary for its legitimate purpose.</p>","excerpt":"Functional Independence Cohesion and Coupling Law of Demeter Functional Independence In order to build a software with effective modular de…","tableOfContents":"<ul>\n<li><a href=\"/pages/2022-01-92-modular-design/#functional-independence\">Functional Independence</a></li>\n<li><a href=\"/pages/2022-01-92-modular-design/#cohesion-and-coupling\">Cohesion and Coupling</a></li>\n<li><a href=\"/pages/2022-01-92-modular-design/#law-of-demeter\">Law of Demeter</a></li>\n</ul>","fields":{"slug":"/2022-01-92-modular-design/"},"frontmatter":{"title":"Modular Design","date":"Dec 22, 2022","tags":["design"],"keywords":["ecmascript","es7","es8","es9","es10","es11","es2016","es2017","es2018","es2019","es2020"],"update":"Feb 06, 2020"}}},"pageContext":{"slug":"/2022-01-92-modular-design/","series":[],"lastmod":"2020-02-06"}},"staticQueryHashes":["2027115977","694178885"]}