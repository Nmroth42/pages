{"version":3,"sources":["webpack:///./src/pages/search.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["pageQuery","Search","props","posts","data","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","useCallback","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","date","toLocaleLowerCase","includes","id","className","to","icon","faArrowLeft","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length","PostList","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","throttleScrollHandler","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","expendPostList","list","mapToList","map","excerpt","fields","slug","tags","update","Number","split","mapTag","tag","key","useEffect","slice","addEventListener","removeEventListener"],"mappings":"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","file":"component---src-pages-search-tsx-593825ee6d2e4e1a30aa.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport * as React from 'react';\r\nimport { useState, useCallback } from 'react';\r\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'gatsby';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport { graphql } from 'gatsby';\r\nimport PostList from '../components/PostList';\r\nimport { navigate } from \"gatsby\"\r\nimport './styles/search.scss';\r\n\r\ninterface SearchProps {\r\n  data: any;\r\n}\r\n\r\nconst Search = (props: SearchProps) => {\r\n  const { data } = props;\r\n  const posts = data.allMarkdownRemark.edges;\r\n\r\n  const [value, setValue] = useState('');\r\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\r\n\r\n  const filteredPosts = useCallback(\r\n    posts.filter((post: any) => {\r\n      const { node } = post;\r\n      const { frontmatter, rawMarkdownBody } = node;\r\n      const { title } = frontmatter;\r\n      const { date } = frontmatter\r\n      const lowerValue = value.toLocaleLowerCase();\r\n\r\n      if (!isTitleOnly) return rawMarkdownBody.toLocaleLowerCase().includes(lowerValue);\r\n\r\n      return title.toLocaleLowerCase().includes(lowerValue);\r\n    }),\r\n    [value, isTitleOnly]\r\n  );\r\n\r\n//   const handleSearch = (e) => {\r\n//\r\n//   navigate(`/?search=${value}`)\r\n//   const searchResults = posts.filter(post => {\r\n//     if (\r\n//       post.node.frontmatter.title\r\n//         .toLowerCase()\r\n//         .includes(value.toLowerCase()) ||\r\n//       post.node.frontmatter.date\r\n//         .toLowerCase()\r\n//         .includes(value.toLowerCase())\r\n//     ) {\r\n//       return post\r\n//     }\r\n//   })\r\n//   setQuery(e.target.value)\r\n//   if ( e.target.value.length < 1) {\r\n//   navigate(`/`)\r\n// }\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Search\" />\r\n      <div id=\"Navbar\">\r\n        <div className=\"navbar-wrap-btn\">\r\n          <Link to=\"/\">\r\n            <Fa icon={faArrowLeft} />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div id=\"Search\">\r\n        <div className=\"search-inner-wrap\">\r\n          <div className=\"input-wrap\">\r\n            <Fa icon={faSearch} />\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              id=\"searchInput\"\r\n              value={value}\r\n              placeholder=\"Search\"\r\n              autoComplete=\"off\"\r\n              autoFocus\r\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\r\n                setValue(e.currentTarget.value);\r\n              }}\r\n            />\r\n            <div className=\"search-toggle\">\r\n              <span\r\n                style={{ opacity: isTitleOnly ? 0.8 : 0.4}}\r\n                onClick={() => {\r\n                  setIsTitleOnly(true);\r\n                }}\r\n              >\r\n                Title\r\n              </span>\r\n              <span\r\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.4 }}\r\n                onClick={() => {\r\n                  setIsTitleOnly(false);\r\n                }}\r\n              >\r\n                Content\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\r\n          <PostList posts={value === '' ? posts : filteredPosts} />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          rawMarkdownBody\r\n          excerpt(truncate: true, format: PLAIN)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMM DD, YYYY\")\r\n            title\r\n            tags\r\n            update(formatString: \"MMM DD, YYYY\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Search;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport * as React from 'react';\r\nimport { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { throttle } from 'lodash';\r\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\r\nimport { faTags,  faRandom , faMoon, faSun, faChevronRight, faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { useColorMode } from 'theme-ui';\r\nimport './postList.scss';\r\n\r\ninterface PostListProps {\r\n  posts: any[];\r\n}\r\n\r\n\r\nconst PostList = (props: PostListProps) => {\r\n  const { posts } = props;\r\n  const [showCnt, setShowCnt] = useState(10);\r\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    posts.sort((a: any, b: any) => {\r\n      const af = a.node.frontmatter;\r\n      const bf = b.node.frontmatter;\r\n\r\n      // const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\r\n      // const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\r\n\r\n      // if (aDate < bDate) return 1;\r\n      // if (aDate > bDate) return -1;\r\n      return 0;\r\n    });\r\n    return posts;\r\n  }, [posts]);\r\n\r\n  const throttleScrollHandler = useCallback(\r\n    throttle(() => {\r\n      if (\r\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\r\n      ) {\r\n        setShowCnt((prev: number) => {\r\n          if (prev >= sortedPosts.length) return prev;\r\n          return prev + 10;\r\n        });\r\n      }\r\n    }, 250),\r\n    [sortedPosts]\r\n  );\r\n\r\n  const expendPostList = useCallback((list: any) => {\r\n    const mapToList = list.map((post: any) => {\r\n      const { node } = post;\r\n      const { excerpt, fields, frontmatter } = node;\r\n      const { slug } = fields;\r\n      const { date, title, tags } = frontmatter;\r\n      let update = frontmatter.update;\r\n      if (Number(update.split(',')[1]) === 1) update = null;\r\n\r\n      const mapTag = tags.map((tag: string) => {\r\n        if (tag === 'undefined') return;\r\n\r\n        return (\r\n          <li key={`${slug}-${tag}`} className=\"tag\">\r\n            <span>\r\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\r\n            </span>\r\n          </li>\r\n        );\r\n      });\r\n\r\n      return (\r\n        <li key={slug} className={`post`}>\r\n          <article>\r\n            <div className=\"info-wrapper\">\r\n              <h2 className=\"title\">\r\n                <Link to={slug}>{title}</Link>\r\n              </h2>\r\n              <div className=\"info\">\r\n                <div className=\"date-wrap\">\r\n                  <span className=\"date\">{date}</span>\r\n                  {/* {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null} */}\r\n                </div>\r\n                {/* {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">·</span> : null} */}\r\n                <ul className=\"tag-list\">{mapTag}</ul>\r\n              </div>\r\n            </div>\r\n            <Link to={slug}>\r\n              <span className=\"excerpt\">{excerpt}</span>\r\n            </Link>\r\n          </article>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    setCurrentPostList((prev: JSX.Element[]) => {\r\n      return [...prev, ...mapToList];\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\r\n  }, [showCnt]);\r\n\r\n  useEffect(() => {\r\n    if (currentPostList.length) setCurrentPostList([]);\r\n\r\n    setShowCnt((prev: number) => {\r\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\r\n      return 10;\r\n    });\r\n\r\n    window.addEventListener('scroll', throttleScrollHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', throttleScrollHandler);\r\n    };\r\n  }, [sortedPosts]);\r\n\r\n  return (\r\n    <div className=\"post-list\">\r\n      <ul>\r\n        {currentPostList}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n"],"sourceRoot":""}