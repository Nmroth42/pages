{"version":3,"sources":["webpack:///./src/components/Bio/index.tsx","webpack:///./src/components/RandomPostList/index.tsx","webpack:///./src/pages/random.tsx"],"names":["Bio","comment","config","name","company","location","email","website","linkedin","facebook","instagram","github","className","RandomPostList","props","posts","useState","showCnt","setShowCnt","currentPostList","setCurrentPostList","randomPosts","useMemo","map","value","sort","Math","random","a","b","throttleScrollHandler","useCallback","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","expendPostList","list","mapToList","post","node","excerpt","fields","frontmatter","slug","date","title","tags","update","Number","split","mapTag","tag","key","to","useEffect","slice","addEventListener","removeEventListener","onClick","shuffled","icon","faRandom","pageQuery","RandomPage","data","allMarkdownRemark","edges","site","siteMetadata","Layout","faSearch"],"mappings":"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","file":"component---src-pages-random-tsx-36704a0119ac0071c0fc.js","sourcesContent":["import * as React from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faUserCircle, faAt, faMapMarkerAlt, faLink, faAddressCard, faRss } from '@fortawesome/free-solid-svg-icons';\nimport { faFacebook, faInstagram, faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\n\nimport './bio.scss';\nimport config from '../../../_config';\n\n\n\n      // {!name ? null : (\n      //   <div className=\"bio-item name\">\n      //     <div className=\"icon-wrap\">\n      //       <Fa icon={faUserCircle} />\n      //     </div>\n      //     <span>{name}</span>\n      //   </div>\n      // )}\n      //\n      // {!company ? null : (\n      //   <div className=\"bio-item company\">\n      //     <div className=\"icon-wrap\">\n      //       <Fa icon={faAddressCard} />\n      //     </div>\n      //     <span>{company}</span>\n      //   </div>\n      // )}\n      //\n      // {!location ? null : (\n      //   <div className=\"bio-item location\">\n      //     <div className=\"icon-wrap\">\n      //       <Fa icon={faMapMarkerAlt} />\n      //     </div>\n      //     <span>{location}</span>\n      //   </div>\n      // )}\n      //\n      // {!email ? null : (\n      //   <div className=\"bio-item email\">\n      //     <div className=\"icon-wrap\">\n      //       <Fa icon={faAt} />\n      //     </div>\n      //     <a href={`mailto:${email}`}>{email}</a>\n      //   </div>\n      // )}\n      //\n      // {!website ? null : (\n      //   <div className=\"bio-item website\">\n      //     <div className=\"icon-wrap\">\n      //       <Fa icon={faLink} />\n      //     </div>\n      //\n      //     <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\n      //       {website}\n      //     </a>\n      //   </div>\n      // )}\n      //\n      // <div className=\"social\">\n      //   <a href={`${config.siteUrl}/rss`} target=\"_blank\" rel=\"noopener noreferrer\">\n      //     <Fa icon={faRss} className=\"rss\" />\n      //   </a>\n      //\n      //   {!linkedin ? null : (\n      //     <a href={linkedin} target=\"_blank\" rel=\"noopener noreferrer\">\n      //       <Fa icon={faLinkedin} className=\"linkedin\" />\n      //     </a>\n      //   )}\n      //\n      //   {!facebook ? null : (\n      //     <a href={facebook} target=\"_blank\" rel=\"noopener noreferrer\">\n      //       <Fa icon={faFacebook} className=\"facebook\" />\n      //     </a>\n      //   )}\n      //   {!instagram ? null : (\n      //     <a href={instagram} target=\"_blank\" rel=\"noopener noreferrer\">\n      //       <Fa icon={faInstagram} className=\"instagram\" />\n      //     </a>\n      //   )}\n      //   {!github ? null : (\n      //     <a href={github} target=\"_blank\" rel=\"noopener noreferrer\">\n      //       <Fa icon={faGithub} className=\"github\" />\n      //     </a>\n      //   )}\n      // </div>\n\nconst Bio = () => {\n  const { comment, name, company, location, email, website, linkedin, facebook, instagram, github } = config;\n\n  return (\n    <div className=\"bio\">\n      {!comment ? null : <span className=\"comment\">{comment}</span>}\n    </div>\n  );\n};\n\nexport default Bio;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faTags,  faRandom , faMoon, faSun, faChevronRight, faUserCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport './randomPostList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst RandomPostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const randomPosts = useMemo(() => {\n    let shuffled = posts\n      .map((value) => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value)\n\n    return shuffled;\n\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= randomPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [randomPosts]\n  );\n\n  const handleShuffle = () => {\n    let shuffled = posts\n      .map((value) => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value)\n\n    setCurrentPostList([])\n    expendPostList(shuffled.slice(0, 3))\n\n\n  };\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { excerpt, fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, tags } = frontmatter;\n      let update = frontmatter.update;\n      if (Number(update.split(',')[1]) === 1) update = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\n              </div>\n              {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <Link to={slug}>\n              <span className=\"excerpt\">{excerpt}</span>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(randomPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(randomPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [randomPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>\n        <li  className={`post`}>\n          <article>\n            <button onClick={handleShuffle}>\n              <Fa icon={faRandom} />\n            </button>\n          </article>\n        </li>\n        {currentPostList}\n      </ul>\n    </div>\n  );\n};\n\nexport default RandomPostList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport Bio from '../components/Bio';\nimport './styles/index.scss';\nimport RandomPostList from '../components/RandomPostList';\n\ninterface IndexPageProps {\n  path: string;\n  data: any;\n}\n\nconst RandomPage = (props: IndexPageProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n  const title = data.site.siteMetadata.title;\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <div className=\"index-wrap\">\n        <Bio />\n        <div className=\"index-post-list-wrap\">\n          <RandomPostList posts={posts} />\n          {posts.length < 100 ? null : (\n            <div className=\"show-more-posts\">\n              <div className=\"show-more-btn\">\n                <Link to=\"/search\">\n                  <Fa icon={faSearch} />\n                  <span>SHOW MORE POSTS</span>\n                </Link>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: 100) {\n      edges {\n        node {\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            update(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default RandomPage;\n"],"sourceRoot":""}